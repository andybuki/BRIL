package uk.ac.kcl.cerch.bril.relationship.generator;

import java.util.Map;
import java.util.Vector;

import uk.ac.kcl.cerch.bril.common.types.BrilRelationshipType;
import uk.ac.kcl.cerch.bril.fileformat.CrystallographyObjectType;
import uk.ac.kcl.cerch.bril.relationship.ObjectRelationship;
import uk.ac.kcl.cerch.bril.relationship.common.GeneratorUtils;
import uk.ac.kcl.cerch.soapi.objectstore.ObjectStoreException;

/**
 * @author Eric Liao
 * 
 */
public class SEQFileRelationshipGeneratorImpl implements DOCFileRelationshipGenerator {

	private String splitSequenceProcessID;	
	private GeneratorUtils generatorUtils;
	private ObjectRelationship objectRelationship;

	@Override
	public ObjectRelationship generateRelationships(String objectID,
			String experimentId) {

		if (experimentId.contains("bril:") == false) {
			experimentId = "bril:" + experimentId;
		}
		generatorUtils = new GeneratorUtils();
		objectRelationship = new ObjectRelationship();
		objectRelationship.addRelationship(objectID, "isPartOf", experimentId);

		try {
			/**
			 * Search in the object store for this object's DC data that sets
			 * title and date values to the setter methods in the GeneratorUtils
			 */
			generatorUtils.searchForArchivalObjects(objectID);
		
		} catch (ObjectStoreException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		/*  
		 * IMPORTANT: 
		 * Assume all sequence files are generated by the 'Split sequence' process and derived from the original doc		
		 * Not all sequences will be used to search the PDB. Create the relationship to the 'search' process only when
		 * sequence has been found in a DEF file.  
		 */

		if (checkForSplitSequenceProcess(experimentId) == true) {
			System.out.println("existing split sequence id: " + getSplitSequenceProcessId());
			
			// Sequence file ---wasGeneratedBy---> Split sequence process
			objectRelationship.addRelationship(objectID, BrilRelationshipType.wasGeneratedBy.getRelation(), getSplitSequenceProcessId());
			System.out.println("relationship: " + objectID + " --wasGeneratedBy--> " + getSplitSequenceProcessId());
		}
		
		System.out.println("Looking for the original sequence document");
		Map<String, Long> returnedSortedDOCFileObjectIds = generatorUtils
				.getRepositoryDescSortedResult(experimentId, CrystallographyObjectType.DOCFile);		
			
		if (returnedSortedDOCFileObjectIds.size() != 0) {
			System.out.println("DOC file is retrieved from the repository");			
			String objectDate = generatorUtils.getObjectDate();			
			long date_object = uk.ac.kcl.cerch.bril.common.util.DateTime.getLongDateTime(objectDate, "dd/MM/yyyy HH:mm:ss");
			
			for (Map.Entry<String, Long> entry : returnedSortedDOCFileObjectIds.entrySet()) {
				long date_result = Long.valueOf(entry.getValue());
				long dateDifference = date_object - date_result;
				String diffvalue = String.valueOf(dateDifference);
				int gotId = 0;
				if (diffvalue.contains("-") == false && gotId == 0) {
					gotId++;					
					String selectedDOCObjectId = entry.getKey();
					System.out.println("DOC file id: " + selectedDOCObjectId);
					
					if (selectedDOCObjectId.contains("/")) {
						selectedDOCObjectId = selectedDOCObjectId
								.substring(selectedDOCObjectId.lastIndexOf("/") + 1); 
						// remove
						// info:fedora/
						// from
						// the
						// object
						// id
					}
					System.out.println("selectedDOCObjectId: " + selectedDOCObjectId);

					// Sequence file ---wasDerivedFrom---> Original DOC file
					objectRelationship.addRelationship(objectID, BrilRelationshipType.wasDerivedFrom.getRelation(), selectedDOCObjectId);
					System.out.println("relationship: " + objectID + " --wasDerivedFrom--> " + selectedDOCObjectId);
				}
			}
		}
		
		return objectRelationship;
	}

	/**
	 * Connects to and searches the repository with the query parameter 'SplitSequenceProcess' on the title of DC
	 * 
	 * @param experimentId
	 * @return boolean result indicating if the split sequence process for this experiment is present or not
	 */	
	private boolean checkForSplitSequenceProcess(String experimentId) {
		boolean result = false;
		String expId = experimentId;
		//check if id doesnot have the prefix bril, add the prefix
		if (experimentId.lastIndexOf(':') == -1) {
			expId = "bril:"+experimentId;
		}
		Vector<String> test = generatorUtils.searchForObjectIds(expId, "title", "SplitSequenceProcess");
		if (test.size() != 0 ) {
			for (int i=0; i<test.size(); i++) {
				String res = test.get(i);
				if (res != null) {
					splitSequenceProcessID = res.substring(res.lastIndexOf("/") + 1);
				}
			}
			result = true;
		}
		return result;
	}
	
	public String getSplitSequenceProcessId(){
		return splitSequenceProcessID;
	}
}