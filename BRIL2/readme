============================================================
Resository and Message Queue Reader: Setup in a server....
============================================================
*****Start activeMQ server/broker:*********************

1) Download ActiveMQ follow the instrctions

2) Persistance storage:-
   -my-activemq.xml consist of the persistance mysql database for the messages
   -create a database with a username and password for activeMQ, change the my-activemq.xml with this one.
   -place 'mysql-connector-java-5.0.8-bin.jar' in the lib/optional directory

3) Start activeMQ using this config file: my-activemq.xml

  Example windows:
        C:\Applications\apache-activemq-5.3.0>bin\activemq xbean:file:conf/my-activemq.xml

  Linux:
        user@bril:~/apache-activemq-5.3.0$ ./bin/activemq xbean:file:conf/my-activemq.xml

4) goto: http://localhost:8161/admin/queues.jsp


*****Set max_allowed_packet in the persistence database (mysql):

In the mysql Server:

Windows:
C:\Program Files\MySQL\MySQL Server 5.0\bin>mysqld-nt --max_allowed_packet=16M

Linux:
shell>mysqld --max_allowed_packet=16M

*** If not change the files at: C:\Program Files\MySQL\MySQL Server 5.0\my.ini, 
and other .ini files and change the value for max_allowed_packet
(these files are used during sql server startup)

**********BRIL package jar file requirements********************

1) Install Fedora and ActiveMQ in the server.

2) Edit bril.properties file to change the activemq broker, fedora host, port and username/password to reflect your installations of ActiveMQ and Fedora

3) Change config.xml with fedora hostname, port, usename and password

4) SOAPI setup:
   -setup soapi database and run sql commands to create tables (see objectstore-sql.txt).
   -Change element <bean id="dataSource"> in soapi.xml file in config directory; with database name, username and password for the created soapi database.
   -create directories and file: /temp/work/aidgen.txt (used for SOAPI SIP processor)


**********Start the Queue Reader*****************

Run:-
BRIL/dist> java -jar ADQueueReader.jar


=================================================
For uri for bril when creating foxml document
=================================================

Add uri in enum class 'common.fedora.FedoraNamespaceContext'
eg.,  BRILRELS( "bril_rels", "http://bril-dev.cerch.kcl.ac.uk/relationship#" )

For relsext: add in class 'common.fedora.FedoraRelsExt'

1. Define a variable
   private static FedoraNamespace bril_rels = new FedoraNamespaceContext().getNamespace( "bril_rels" );

2. In serialize method add namespace as:
   xmlw.writeNamespace( bril_rels.getPrefix(), bril_rels.getURI() );

============================================================================
Properties Files
============================================================================

brilfileformat.properties
============================================================================
- list of file extensions for all bril content types with description for each. 
  This can be added with nanoimaging file or content type later

- used in ContentTypeFileObjectFormatIdentifierImpl class to get the fileType information from the extension of the   given file

============================================================================
brilcontent.properties
============================================================================
- list of descriptions (as in brilfileformat.properties ) for the content type 
  supposted in bril with its associated mimetype

- used in ObjectFormatValidatorImpl class to validate if the mimetype of a file generated by (file.exe) matches the   mimetype assigned in this properties file.
  
  This also checks if the mimetype is supposted by the repository- against an enum list of supposted mimetypes. 
